import{_ as s,o as a,c as n,O as l}from"./chunks/framework.23072b34.js";const o="/cocoLib/assets/image-20230607201640413.bdccea30.png",m=JSON.parse('{"title":"动态组件","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/16 动态组件.md","filePath":"vue3/16 动态组件.md","lastUpdated":null}'),p={name:"vue3/16 动态组件.md"},e=l(`<h1 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h1><h2 id="什么是动态组件" tabindex="-1">什么是动态组件? <a class="header-anchor" href="#什么是动态组件" aria-label="Permalink to &quot;什么是动态组件?&quot;">​</a></h2><p>让多个组件使用同一个挂载点，并动态切换，这就是动态组件</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">--</span><span style="color:#C792EA;">在挂载点使用component标签，然后使用v-bind:is</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">”组件”--</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;component :is=&quot;com&quot;&gt;&lt;/component&gt;	</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    import AVue from &#39;./A.vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">	import BVue from &#39;./B.vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    const com = ref(AVue)</span></span>
<span class="line"><span style="color:#A6ACCD;">    //修改com值即可切换动态组件</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span></code></pre></div><h2 id="性能调优" tabindex="-1">性能调优 <a class="header-anchor" href="#性能调优" aria-label="Permalink to &quot;性能调优&quot;">​</a></h2><p><code>ref(AVue)</code>生命的响应式组件，会把组件里面的属性也做<strong>劫持</strong>，造成性能浪费，所以vue给了一个警告</p><img src="`+o+`" alt="image-20230607201640413" style="zoom:50%;"><p><strong>优化：</strong></p><ul><li>响应式声明用<code>shallowRef()</code>代替</li><li>组件用 <code>makeRow()</code>包裹</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> AVue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./A.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> BVue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./B.vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//响应式声明用shallowRef()代替</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> com </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shallowRef</span><span style="color:#A6ACCD;">(AVue)	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//组件用 makeRow()包裹</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">name </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A组件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">com </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeRow</span><span style="color:#A6ACCD;">(AVue)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">name </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">B组件</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">com </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeRow</span><span style="color:#A6ACCD;">(AVue)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span></code></pre></div>`,10),t=[e];function c(r,i,D,y,A,C){return a(),n("div",null,t)}const d=s(p,[["render",c]]);export{m as __pageData,d as default};
