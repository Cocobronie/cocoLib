import{_ as s,o as a,c as o,O as l}from"./chunks/framework.23072b34.js";const n="/cocoLib/images/image-20230624132610054.png",e="/cocoLib/images/image-20230624132646303.png",t="/cocoLib/images/1460000013069520-1687585590029-8.webp",p="/cocoLib/images/image-20230624132824049.png",r="/cocoLib/images/image-20230624134240088.png",c="/cocoLib/images/image-20230624134254627.png",i="/cocoLib/images/image-20230624170247805.png",d="/cocoLib/images/image-20230624170408290.png",g="/cocoLib/images/image-20230624170904322.png",h="/cocoLib/images/image-20230624171232878.png",C="/cocoLib/images/image-20230624172307195.png",y="/cocoLib/images/image-20230624184449908.png",D="/cocoLib/images/image-20230624173315841.png",m="/cocoLib/images/image-20230624173415987.png",P=JSON.parse('{"title":"CSS页面布局","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/HTML +CSS/08 CSS页面布局.md","filePath":"CSS/HTML +CSS/08 CSS页面布局.md","lastUpdated":null}'),u={name:"CSS/HTML +CSS/08 CSS页面布局.md"},F=l('<h1 id="css页面布局" tabindex="-1">CSS页面布局 <a class="header-anchor" href="#css页面布局" aria-label="Permalink to &quot;CSS页面布局&quot;">​</a></h1><p>页面布局要学习三大核心,</p><ol><li>盒子模型</li><li>浮动</li><li>定位</li></ol><h2 id="_1、盒子模型" tabindex="-1">1、盒子模型 <a class="header-anchor" href="#_1、盒子模型" aria-label="Permalink to &quot;1、盒子模型&quot;">​</a></h2><img src="'+n+'" alt="image-20230624132610054" style="zoom:50%;"><ul><li>content</li><li>padding</li><li>margin</li><li>border</li></ul><h3 id="_1-border" tabindex="-1">1.border <a class="header-anchor" href="#_1-border" aria-label="Permalink to &quot;1.border&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">border : </span><span style="color:#FFCB6B;">border-width</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">| </span><span style="color:#FFCB6B;">border-style</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">| </span><span style="color:#FFCB6B;">border-color</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/*没有顺序*/</span></span></code></pre></div><img src="'+e+'" alt="image-20230624132646303" style="zoom:47%;"><p>边框样式 <code>border-style</code> 可以设置如下值：</p><ul><li><code>none</code>：没有边框即忽略所有边框的宽度（默认值）</li><li><code>solid</code>：边框为单实线(最为常用的)</li><li><code>dashed</code>：边框为虚线</li><li><code>dotted</code>：边框为点线</li></ul><h4 id="边框合并" tabindex="-1">边框合并 <a class="header-anchor" href="#边框合并" aria-label="Permalink to &quot;边框合并&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">border-collapse</span><span style="color:#A6ACCD;">:collapse;		</span><span style="color:#676E95;font-style:italic;">/*相邻边框合并在一起*/</span></span></code></pre></div><h4 id="边框撑大盒子" tabindex="-1">边框撑大盒子 <a class="header-anchor" href="#边框撑大盒子" aria-label="Permalink to &quot;边框撑大盒子&quot;">​</a></h4><img src="'+t+'" alt="图2.IE模型宽度计算示意图" style="zoom:67%;"><ul><li><strong>IE模型元素宽度width=content+padding</strong></li></ul><h4 id="圆角边框" tabindex="-1">圆角边框 <a class="header-anchor" href="#圆角边框" aria-label="Permalink to &quot;圆角边框&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">border-radius</span><span style="color:#A6ACCD;"> 属性用于设置元素的外边框圆角</span></span></code></pre></div><ul><li>参数值可以为数值或百分比的形式</li><li>如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上角、右上角、右下角、左下角</li><li>分开写：<code>border-top-left-radius</code>、<code>border-top-right-radius</code>、<code>border-bottom-right-radius </code>和 <code>border-bottom-left-radius</code></li></ul><h3 id="_2-padding" tabindex="-1">2.padding <a class="header-anchor" href="#_2-padding" aria-label="Permalink to &quot;2.padding&quot;">​</a></h3><img src="'+p+'" alt="image-20230624132824049" style="zoom:50%;"><ul><li>盒子指定了<code>width/heigh</code>属性, 则此时<code>padding</code>会撑开盒子大小.</li><li>盒子本身没有指定<code>width/height</code>属性, 则此时<code>padding</code>不会撑开盒子大小.</li></ul><h3 id="_3-margin" tabindex="-1">3.margin <a class="header-anchor" href="#_3-margin" aria-label="Permalink to &quot;3.margin&quot;">​</a></h3><p><code>margin </code>简写方式代表的意义跟 <code>padding </code>完全一致</p><h4 id="外边距典型应用" tabindex="-1">外边距典型应用 <a class="header-anchor" href="#外边距典型应用" aria-label="Permalink to &quot;外边距典型应用&quot;">​</a></h4><p>外边距可以让块级盒子水平居中，但是必须满足两个条件：</p><p>① 盒子必须<strong>指定了宽度（width）</strong>。</p><p>② 盒子左右的外边距都设置为 <code>auto</code> 。</p><p>让<strong>块级元素</strong>水平居中，<strong>行内元素或者行内块元素</strong>水平居中给其父元素添加 <code>text-align:center</code> 即可。</p><h4 id="外边距的合并" tabindex="-1">外边距的合并 <a class="header-anchor" href="#外边距的合并" aria-label="Permalink to &quot;外边距的合并&quot;">​</a></h4><p>使用 <code>margin</code> 定义块元素的垂直外边距时，可能会出现外边距的合并。 主要有两种情况:</p><ol><li><strong>相邻</strong>块元素垂直外边距的合并</li><li><strong>嵌套</strong>块元素垂直外边距的塌陷</li></ol><p><img src="'+r+'" alt="image-20230624134240088" style="zoom:43%;"><img src="'+c+'" alt="image-20230624134254627" style="zoom:50%;"></p><h3 id="_4-盒子阴影" tabindex="-1">4.盒子阴影 <a class="header-anchor" href="#_4-盒子阴影" aria-label="Permalink to &quot;4.盒子阴影&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">box-shadow</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">h-shadow</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v-shadow</span><span style="color:#A6ACCD;"> blur spread color inset;</span></span></code></pre></div><img src="'+i+'" alt="image-20230624170247805" style="zoom:50%;"><p><strong>注意</strong>：</p><ol><li><p>默认的是<strong>外阴影(outset)</strong>, 但是不可以写这个单词,否则造成阴影无效</p></li><li><p>盒子阴影不占用空间，不会影响其他盒子排列。</p></li></ol><h3 id="_5-文字阴影" tabindex="-1">5.文字阴影 <a class="header-anchor" href="#_5-文字阴影" aria-label="Permalink to &quot;5.文字阴影&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">text-shadow</span><span style="color:#A6ACCD;">: </span><span style="color:#FFCB6B;">h-shadow</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">v-shadow</span><span style="color:#A6ACCD;"> blur color</span></span></code></pre></div><img src="'+d+'" alt="image-20230624170408290" style="zoom:47%;"><h2 id="_2、浮动" tabindex="-1">2、浮动 <a class="header-anchor" href="#_2、浮动" aria-label="Permalink to &quot;2、浮动&quot;">​</a></h2><h3 id="_1-标准流-普通流-文档流" tabindex="-1">1.标准流（普通流/文档流） <a class="header-anchor" href="#_1-标准流-普通流-文档流" aria-label="Permalink to &quot;1.标准流（普通流/文档流）&quot;">​</a></h3><p>所谓的标准流: 就是标签按照规定好默认方式排列.</p><ol><li><strong>块级元素</strong>会独占一行，<strong>从上向下</strong>顺序排列。 <ul><li>常用元素：<code>div</code>、<code>hr</code>、<code>p</code>、<code>h1~h6</code>、<code>ul</code>、<code>ol</code>、<code>dl</code>、<code>form</code>、<code>table</code></li></ul></li><li><strong>行内元素</strong>会按照顺序，<strong>从左到右</strong>顺序排列，碰到父元素边缘则自动换行。 <ul><li>常用元素：<code>span</code>、<code>a</code>、<code>i</code>、<code>em</code> 等</li></ul></li></ol><p><strong>网页布局第一准则</strong>：多个块级元素<strong>纵向</strong>排列找标准流，多个块级元素<strong>横向</strong>排列找浮动。</p><h3 id="_2-浮动-float" tabindex="-1">2.浮动（float) <a class="header-anchor" href="#_2-浮动-float" aria-label="Permalink to &quot;2.浮动（float)&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">选择器 </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">float</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 属性值</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><img src="'+g+'" alt="image-20230624170904322" style="zoom:50%;"><h3 id="_3-浮动特性-重难点" tabindex="-1">3.浮动特性（重难点） <a class="header-anchor" href="#_3-浮动特性-重难点" aria-label="Permalink to &quot;3.浮动特性（重难点）&quot;">​</a></h3><ol><li>浮动元素会<strong>脱离标准流(脱标)</strong> ,<strong>浮动的盒子不再保留原先的位置</strong><img src="'+h+'" alt="image-20230624171232878" style="zoom:50%;"><ul><li><strong>浮动的盒子只会影响浮动盒子后面的标准流,不会影响前面的标准流.</strong></li></ul></li><li>浮动的元素会一行内显示并且元素<strong>顶部对齐</strong><ul><li>浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子， <strong>多出的盒子</strong> 会另起一行对齐。</li></ul></li><li>浮动的元素会具有<strong>行内块元素</strong>的特性 <ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据<strong>内容</strong>来决定</li></ul></li></ol><h3 id="_4-清除浮动" tabindex="-1">4.清除浮动 <a class="header-anchor" href="#_4-清除浮动" aria-label="Permalink to &quot;4.清除浮动&quot;">​</a></h3><p><strong>清除浮动目的</strong></p><p>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">选择器</span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">属性值</span><span style="color:#89DDFF;">;}</span></span></code></pre></div><img src="'+C+`" alt="image-20230624172307195" style="zoom:40%;"><ol><li><p><strong>额外标签法</strong>也称为隔墙法，是 W3C 推荐的做法。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> style=”clear:both”</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">&lt;/</span><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>在最后一个浮动的子元素后面添加一个额外标签，要求这个新的空标签必须是<strong>块级元素</strong>。</p></li><li><p>父级添加 <code>overflow </code>属性</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">overflow 属性，将其属性值设置为 hidden、 auto 或 scroll</span></span></code></pre></div></li><li><p>父级添加<code>after</code>伪元素</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> both</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">visibility</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* IE6、7 专有 */</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> *</span><span style="color:#B2CCD6;">zoom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></li><li><p>父级添加<strong>双伪元素</strong></p></li></ol><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">before</span><span style="color:#89DDFF;">,.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">content</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">table</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">after</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">clear</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">both</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">clearfix</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> *</span><span style="color:#B2CCD6;">zoom</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_3、定位" tabindex="-1">3、定位 <a class="header-anchor" href="#_3、定位" aria-label="Permalink to &quot;3、定位&quot;">​</a></h2><h3 id="_1-为什么需要定位" tabindex="-1">1.为什么需要定位 <a class="header-anchor" href="#_1-为什么需要定位" aria-label="Permalink to &quot;1.为什么需要定位&quot;">​</a></h3><ol><li>某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子</li><li>当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</li></ol><h3 id="_2-定位" tabindex="-1">2.定位 <a class="header-anchor" href="#_2-定位" aria-label="Permalink to &quot;2.定位&quot;">​</a></h3><p>将盒子定在某一个位置，所以定位也是在摆放盒子， 按照定位的方式移动盒子。</p><p><strong>定位 = 定位模式 + 边偏移 。</strong></p><p><strong>定位模式</strong>用于指定一个元素在文档中的定位方式。<strong>边偏移</strong>则决定了该元素的最终位置。</p><h3 id="_3-定位模式" tabindex="-1">3.定位模式 <a class="header-anchor" href="#_3-定位模式" aria-label="Permalink to &quot;3.定位模式&quot;">​</a></h3><img src="`+y+'" alt="image-20230624184449908" style="zoom:67%;"><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">position:定位模式</span></span></code></pre></div><img src="'+D+'" alt="image-20230624173315841" style="zoom:57%;"><h4 id="静态定位-static" tabindex="-1">静态定位 static <a class="header-anchor" href="#静态定位-static" aria-label="Permalink to &quot;静态定位 static&quot;">​</a></h4><p><strong>静态定位</strong>是元素的默认定位方式，<strong>无定位</strong>的意思，<strong>没有边偏移</strong></p><ul><li><p>静态定位按照<strong>标准流</strong>特性摆放位置，它<strong>没有边偏移</strong></p></li><li><p>静态定位在布局时很少用到</p></li></ul><h4 id="相对定位-relative" tabindex="-1">相对定位 relative <a class="header-anchor" href="#相对定位-relative" aria-label="Permalink to &quot;相对定位 relative&quot;">​</a></h4><p>相对定位是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的（自恋型）。</p><ol><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li><li>原来<strong>在标准流的位置继续占有</strong>，后面的盒子仍然以标准流的方式对待它。 因此，相对定位并<strong>没有脱标</strong>。</li><li>它最典型的应用是给绝对定位当爹的。。。</li></ol><h4 id="绝对定位-absolute" tabindex="-1">绝对定位 absolute <a class="header-anchor" href="#绝对定位-absolute" aria-label="Permalink to &quot;绝对定位 absolute&quot;">​</a></h4><p>绝对定位是元素在移动位置的时候，是相对于它<strong>祖先元素</strong>来说的（拼爹型）。</p><ol><li>如果没有祖先元素或者祖先元素没有定位，则以<strong>浏览器</strong>为准定位（Document 文档）。</li><li>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的<strong>有定位祖先元素</strong>为参考点移动位置。</li><li>绝对定位不再占有原先的位置。（脱标） 所以绝对定位是<strong>脱离标准流</strong>的。</li></ol><h4 id="固定定位-fixed" tabindex="-1">固定定位 fixed <a class="header-anchor" href="#固定定位-fixed" aria-label="Permalink to &quot;固定定位 fixed&quot;">​</a></h4><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变。</p><ol><li>以浏览器的可视窗口为参照点移动元素。 <ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动。</li></ul></li><li>固定定位不在占有原先的位置。 固定定位也是<strong>脱标</strong>的，其实固定定位也可以看做是一种特殊的绝对定位</li></ol><h4 id="粘性定位-sticky" tabindex="-1">粘性定位 sticky <a class="header-anchor" href="#粘性定位-sticky" aria-label="Permalink to &quot;粘性定位 sticky&quot;">​</a></h4><p>粘性定位可以被认为是<strong>相对定位</strong>和<strong>固定定位</strong>的混合。</p><ol><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原先的位置（相对定位特点）</li><li>必须添加 top 、left、right、bottom 其中一个才有效</li></ol><h3 id="_4、边偏移" tabindex="-1">4、边偏移 <a class="header-anchor" href="#_4、边偏移" aria-label="Permalink to &quot;4、边偏移&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">边偏移：偏移量</span></span></code></pre></div><img src="'+m+'" alt="image-20230624173415987" style="zoom:47%;"><h3 id="_5、定位叠放次序-z-index" tabindex="-1">5、定位叠放次序 z-index <a class="header-anchor" href="#_5、定位叠放次序-z-index" aria-label="Permalink to &quot;5、定位叠放次序 z-index&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">选择器 </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">z-index</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>数值可以是正整数、负整数或 0, 默认是 <code>auto</code>，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有<code> z-index</code> 属性</li></ul><h3 id="_6、绝对定位的盒子居中" tabindex="-1">6、绝对定位的盒子居中 <a class="header-anchor" href="#_6、绝对定位的盒子居中" aria-label="Permalink to &quot;6、绝对定位的盒子居中&quot;">​</a></h3><p>加了绝对定位的盒子不能通过<code> margin:0 auto</code> 水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p><p>① <code>left: 50%;</code>：让盒子的左侧移动到父级元素的水平中心位置。</p><p>② <code>margin-left: -100px;</code>：让盒子向左移动自身宽度的一半。</p><h3 id="_7、注意" tabindex="-1">7、注意 <a class="header-anchor" href="#_7、注意" aria-label="Permalink to &quot;7、注意&quot;">​</a></h3><p>绝对定位和固定定位也和浮动类似。</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li><li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li></ol><p>脱标的盒子不会触发外边距塌陷</p>',98),b=[F];function A(_,f,q,x,B,k){return a(),o("div",null,b)}const S=s(u,[["render",A]]);export{P as __pageData,S as default};
