import{_ as o,o as s,c as e,O as a}from"./chunks/framework.23072b34.js";const n="/cocoLib/images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L05hbmN5Rnlu,size_16,color_FFFFFF,t_70.png",t="/cocoLib/images/image-20230615190630954.png",u=JSON.parse('{"title":"浏览器与Node的事件循环(Event Loop)有何区别?","description":"","frontmatter":{},"headers":[],"relativePath":"JS/JS面试题/14 浏览器与Node的事件循环(Event Loop)有何区别.md","filePath":"JS/JS面试题/14 浏览器与Node的事件循环(Event Loop)有何区别.md","lastUpdated":null}'),l={name:"JS/JS面试题/14 浏览器与Node的事件循环(Event Loop)有何区别.md"},r=a('<h1 id="浏览器与node的事件循环-event-loop-有何区别" tabindex="-1">浏览器与Node的事件循环(Event Loop)有何区别? <a class="header-anchor" href="#浏览器与node的事件循环-event-loop-有何区别" aria-label="Permalink to &quot;浏览器与Node的事件循环(Event Loop)有何区别?&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">参考</p><p><a href="https://juejin.cn/post/6844903761949753352" target="_blank" rel="noreferrer">浏览器与Node的事件循环(Event Loop)有何区别? - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/NancyFyn/article/details/118381312" target="_blank" rel="noreferrer">js 同步任务和异步任务_F N Janine的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/NancyFyn/article/details/118407548" target="_blank" rel="noreferrer">什么是宏任务、微任务？宏任务、微任务有哪些？又是怎么执行的？<em>宏任务和微任务</em></a></p><p><a href="https://juejin.cn/post/7020710294083092493" target="_blank" rel="noreferrer">详解宏任务、微任务与事件循环 Event Loop - 掘金 (juejin.cn)</a></p></div><ol><li>浏览器有哪些常驻线程？</li><li>宏任务还是微任务是什么？</li><li>Event Loop 过程是怎样的呢？</li><li>哪些属于宏任务？哪些属于微任务？</li></ol><h2 id="_1、进程与线程" tabindex="-1">1、进程与线程 <a class="header-anchor" href="#_1、进程与线程" aria-label="Permalink to &quot;1、进程与线程&quot;">​</a></h2><h3 id="_1-1-js线程" tabindex="-1">1.1 JS线程 <a class="header-anchor" href="#_1-1-js线程" aria-label="Permalink to &quot;1.1 JS线程&quot;">​</a></h3><p>javascript从诞生之日起就是一门 <code>单线程</code> 的 <code>非阻塞</code> 的脚本语言，所以一切 Javascript “<strong>多线程</strong>” 都是<strong>单线程</strong>模拟出来的。</p><h4 id="非阻塞" tabindex="-1"><strong>非阻塞</strong> <a class="header-anchor" href="#非阻塞" aria-label="Permalink to &quot;**非阻塞**&quot;">​</a></h4><p><strong>非阻塞</strong>是当代码需要进行一项异步任务（无法立刻返回结果，需要花一定时间才能返回的任务，如I/O事件）的时候，<strong>主线程</strong>会挂起（pending）这个任务，然后在异步任务返回结果的时候再根据一定规则去执行相应的回调。</p><p>JS是如何实现<strong>非阻塞</strong>的呢？——事件循环</p><h4 id="js任务分为两类" tabindex="-1">js任务分为两类 <a class="header-anchor" href="#js任务分为两类" aria-label="Permalink to &quot;js任务分为两类&quot;">​</a></h4><ul><li><strong>同步任务</strong>：同步任务不需要进行等待可立即看到执行结果，比如<code>console</code>。</li><li><strong>异步任务</strong>：异步任务需要等待一定的时候才能看到结果，比如<code>setTimeout</code>、网络请求。</li></ul><h4 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h4><img src="'+n+'" alt="在这里插入图片描述" style="zoom:50%;"><ul><li>同步和异步任务分别进入不同的执行&quot;场所&quot;，同步的进入主线程，异步的进入<code>Event Table</code>并注册函数。</li><li>当指定的事情完成时，<code>Event Table</code>会将这个函数移入<code>Event Queue</code>。</li><li><strong>主线程</strong>内的任务执行完毕为空，会去<code>Event Queue</code>读取对应的函数，进入<strong>主线程</strong>执行。</li><li>上述过程会不断重复，也就是常说的<code>Event Loop</code>(事件循环)。</li></ul><h3 id="_1-2-浏览器进程与线程" tabindex="-1">1.2 浏览器进程与线程 <a class="header-anchor" href="#_1-2-浏览器进程与线程" aria-label="Permalink to &quot;1.2 浏览器进程与线程&quot;">​</a></h3><p>以Chrome浏览器中为例，当你打开一个 <strong>Tab 页</strong>时，其实就是创建了一个<strong>进程</strong>。当你发起一个<strong>请求</strong>时，其实就是创建了一个<strong>线程</strong>，当请求结束后，该线程可能就会被销毁。</p><p>浏览器内核是<strong>多线程</strong>，在内核控制下各线程相互配合以保持同步，一个浏览器通常由以下常驻线程组成：</p><ul><li>GUI 渲染线程</li><li>JavaScript引擎线程</li><li>定时触发器线程</li><li>事件触发线程</li><li>异步http请求线程</li></ul><h2 id="_2、浏览器中的-event-loop" tabindex="-1">2、浏览器中的 Event Loop <a class="header-anchor" href="#_2、浏览器中的-event-loop" aria-label="Permalink to &quot;2、浏览器中的 Event Loop&quot;">​</a></h2><h3 id="_2-1-micro-task-宏任务-与-macro-task-微任务" tabindex="-1">2.1 Micro-Task （宏任务）与 Macro-Task（微任务） <a class="header-anchor" href="#_2-1-micro-task-宏任务-与-macro-task-微任务" aria-label="Permalink to &quot;2.1 Micro-Task （宏任务）与 Macro-Task（微任务）&quot;">​</a></h3><p><strong>异步任务</strong>被分为两类：微任务 <code>(micro task)</code> 和宏任务 <code>(macro task)</code>。</p><p>在ES3以及以前的版本中，JavaScript本身没有发起<strong>异步请求</strong>的能力，也就没有<strong>微任务</strong>的存在。在ES5之后，JavaScript引入了<code>Promise</code>，这样，不需要浏览器，JavaScript引擎自身也能够发起<strong>异步任务</strong>了。</p><p>::: tips ES6 规范</p><p>ES6 规范中，<code>microtask </code>称为<code> jobs</code>，<code>macrotask </code>称为<code> task</code><strong>宏任务</strong>是由<strong>宿主</strong>发起的，而<strong>微任务</strong>由JavaScript<strong>自身</strong>发起。</p><p>:::</p><p><strong>宏任务队列可以有多个，微任务队列只有一个</strong></p><p>以下事件属于<strong>宏任务</strong>：</p><ul><li><code>setInterval()</code></li><li><code>setTimeout()</code></li></ul><p>以下事件属于<strong>微任务</strong>：</p><ul><li><code>promise.then()</code></li><li><code>Async/Await(实际就是promise)</code></li><li><code>new MutaionObserver()</code></li></ul><p><img src="'+t+`" alt="image-20230615190630954"></p><h3 id="_2-2-例题" tabindex="-1">2.2 例题 <a class="header-anchor" href="#_2-2-例题" aria-label="Permalink to &quot;2.2 例题&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Promise2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)    </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>最后输出结果是Promise1，setTimeout1，Promise2，setTimeout2</p><ul><li>一开始执行栈的<strong>同步任务</strong>执行完毕，会去查看是否有<strong>微任务</strong>队列，上题中存在(有且只有一个)，然后执行微任务队列中的所有任务输出<code>Promise1</code>，同时会生成一个宏任务 <code>setTimeout2</code></li><li>然后去查看<strong>宏任务</strong>队列，宏任务<code> setTimeout1</code> 在<code>setTimeout2</code>之前，先执行宏任务 <code>setTimeout1</code>，输出 <code>setTimeout1</code></li><li>在执行宏任务<code>setTimeout1</code>时会生成微任务<code>Promise2</code> ，放入<strong>微任务</strong>队列中，接着先去清空微任务队列中的所有任务，输出 <code>Promise2</code></li><li>清空完微任务队列中的所有任务后，就又会去<strong>宏任务</strong>队列取一个，这回执行的是 <code>setTimeout2</code></li></ul><h2 id="_3、node-中的-event-loop" tabindex="-1">3、Node 中的 Event Loop <a class="header-anchor" href="#_3、node-中的-event-loop" aria-label="Permalink to &quot;3、Node 中的 Event Loop&quot;">​</a></h2>`,36),p=[r];function c(i,d,F,g,y,h){return s(),e("div",null,p)}const _=o(l,[["render",c]]);export{u as __pageData,_ as default};
