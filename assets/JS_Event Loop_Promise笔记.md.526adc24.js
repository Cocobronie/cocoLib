import{_ as s,o as a,c as e,O as o}from"./chunks/framework.23072b34.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS/Event Loop/Promise笔记.md","filePath":"JS/Event Loop/Promise笔记.md","lastUpdated":null}'),l={name:"JS/Event Loop/Promise笔记.md"},n=o('<h2 id="异步编程" tabindex="-1">异步编程 <a class="header-anchor" href="#异步编程" aria-label="Permalink to &quot;异步编程&quot;">​</a></h2><p><strong><code>Promise</code>出现之前异步编程旧的解决方案——单纯的使用回调函数</strong></p><ul><li>fs文件操作</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li>数据库操作</li><li>AJAX</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.server</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">={}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li>定时器</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{},</span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="回调地狱" tabindex="-1">回调地狱 <a class="header-anchor" href="#回调地狱" aria-label="Permalink to &quot;回调地狱&quot;">​</a></h2><p>回调函数嵌套调用, 外部回调函数异步执行的结果是嵌套的回调执行的条件</p><p><strong>回调地狱的缺点?</strong></p><p>不便于阅读 不便于异常处理</p><p><strong>解决方案?</strong></p><p>promise 链式调用</p><p><strong>终极解决方案?</strong></p><p>async/await</p><h2 id="promise状态" tabindex="-1">Promise状态 <a class="header-anchor" href="#promise状态" aria-label="Permalink to &quot;Promise状态&quot;">​</a></h2><p>实例对象的一个属性 <code>PromiseState</code></p><ul><li><code>pending</code> 未决定的</li><li><code>resolved/fullfilled</code> 成功</li><li><code>reject</code> 失败</li></ul><h2 id="promise对象的值" tabindex="-1">Promise对象的值 <a class="header-anchor" href="#promise对象的值" aria-label="Permalink to &quot;Promise对象的值&quot;">​</a></h2><p>实例对象的一个属性 <code>PromiseResult</code></p><p>保存着异步任务<strong>失败/成功</strong>的结果</p><ul><li><code>resolve(value)</code></li><li><code>reject(reason)</code></li></ul>',23),t=[n];function p(r,c,i,d,D,y){return a(),e("div",null,t)}const C=s(l,[["render",p]]);export{A as __pageData,C as default};
