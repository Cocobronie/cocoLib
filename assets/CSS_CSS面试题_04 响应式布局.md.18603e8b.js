import{_ as s,o as a,c as n,O as o}from"./chunks/framework.23072b34.js";const l="/cocoLib/images/1638b26cafb80798tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp",p="/cocoLib/images/1638b26cafc2b3cftplv-t2oaga2asx-zoom-in-crop-mark4536000.webp",e="/cocoLib/images/1638b26cafa2b715tplv-t2oaga2asx-zoom-in-crop-mark4536000.webp",t="/cocoLib/images/1638b26cb026851ctplv-t2oaga2asx-zoom-in-crop-mark4536000.webp",m=JSON.parse('{"title":"响应式布局","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/CSS面试题/04 响应式布局.md","filePath":"CSS/CSS面试题/04 响应式布局.md","lastUpdated":null}'),c={name:"CSS/CSS面试题/04 响应式布局.md"},r=o('<h1 id="响应式布局" tabindex="-1">响应式布局 <a class="header-anchor" href="#响应式布局" aria-label="Permalink to &quot;响应式布局&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">参考</p><p><a href="https://juejin.cn/post/6844903609298059277" target="_blank" rel="noreferrer">关于响应式布局，你必须要知道的 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7046169975706353701" target="_blank" rel="noreferrer">2022 年移动端适配方案指南 — 全网最新最全 - 掘金 (juejin.cn)</a></p></div><ol><li>什么是响应式布局？</li><li>什么是像素？</li><li>什么是分辨率？</li><li>什么是视口？</li><li>如何设置图片响应式？</li><li>百分比布局规则？</li><li>为什么响应式 Web 设计需要媒体查询？</li><li>什么是rem,它与em有何区别?</li></ol><h2 id="_1、什么是响应式布局" tabindex="-1">1、什么是响应式布局？ <a class="header-anchor" href="#_1、什么是响应式布局" aria-label="Permalink to &quot;1、什么是响应式布局？&quot;">​</a></h2><p>响应式Web设计可以让一个网站同时<strong>适配多种设备和多个屏幕</strong>，可以让网站的布局和功能随用户的使用环境（屏幕大小、输入方式、设备/浏览器能力）而变化。</p><h4 id="像素" tabindex="-1">像素 <a class="header-anchor" href="#像素" aria-label="Permalink to &quot;像素&quot;">​</a></h4><p>像素单位有设备像素、设备独立像素、逻辑像素、CSS 像素 3 种。</p><ul><li>设备像素：指的是显示器上的真实像素，每个像素的大小是屏幕固有的属性，屏幕出厂以后就不会再改变</li><li>设备独立像素：是<strong>操作系统</strong>定义的一种像素单位，<strong>应用程序</strong>将<strong>设备独立像素</strong>告诉操作系统，操作系统再将设备独立像素转化为<strong>设备像素</strong>，从而控制屏幕上真正的物理像素点。</li><li>逻辑像素：对于那些像素密度高的屏幕，将多个设备像素划分为一个逻辑像素。至于将多少设备像素划分为一个逻辑像素，这由操作系统决定。</li><li>CSS 像素：在 CSS 中使用的 <code>px</code> 都是指 <code>css </code>像素，比如<code> width: 128px</code>。<code>css</code> 像素的大小是很容易变化的，当我们缩放页面的时候，元素的 <code>css</code> 像素数量不会改变，改变的只是每个 <code>css </code>像素的大小。</li></ul><h4 id="分辨率" tabindex="-1">分辨率 <a class="header-anchor" href="#分辨率" aria-label="Permalink to &quot;分辨率&quot;">​</a></h4><p><strong>设备分辨率</strong>描述的就是这个显示器的宽和高分别是多少个<strong>设备像素</strong>，例如常见的显示器的分辨率为 1920 * 1080。</p><p><strong>逻辑分辨率</strong>用屏幕的 <strong>宽*高</strong> 来表示（单位：<strong>设备独立像素</strong>），我们通过操作系统的分辨率设置来改变<strong>设备独立像素</strong>的大小。例如屏幕的设备分辨率是1920*1200（单位：设备像素），我们可以在当前的分辨率下设置逻辑分辨率是1280*800（单位：设备独立像素）。那么横、纵方向的设备像素数量恰好是设备独立像素的1.5倍。这也意味着，设备独立像素的边长是设备像素边长的1.5倍。</p><h2 id="_2、viewport-视口" tabindex="-1">2、<strong>viewport</strong> 视口 <a class="header-anchor" href="#_2、viewport-视口" aria-label="Permalink to &quot;2、**viewport**  视口&quot;">​</a></h2><p><strong>移动前端中常说的 viewport （视口）就是浏览器中用于呈现网页的区域。视口通常并不等于屏幕大小，特别是可以缩放浏览器窗口的情况下</strong>。</p><p>手机端与PC端视口存在差异：</p><ul><li>PC端的视口宽度等于<strong>分辨率</strong></li><li>移动端的视口宽度跟分辨率没有关系,宽度默认值是设备厂家指定的。iOS, Android基本都将这个视口分辨率设置为 980px。</li></ul><h3 id="_2-1-约束视口" tabindex="-1">2.1 约束视口 <a class="header-anchor" href="#_2-1-约束视口" aria-label="Permalink to &quot;2.1 约束视口&quot;">​</a></h3><p>用手机访问电脑版网页的时候，旁边刚好没有留白。不过页面缩放后文字会变得非常小，用户需要手动放大缩小才能看清楚，体验非常差。</p><p><img src="'+l+'" alt="PC端页面在手机上显示效果" style="zoom:67%;"><img src="'+p+'" alt="约束视口后" style="zoom:67%;"></p><p>为了解决这个问题，可以在网页的中添加下面这行代码：</p><p><strong>按照设备的宽度（device-width）来渲染网页内容</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre></div><ul><li><code>width=device-width</code> 视口为设备宽度（就是人设置的一个宽度）//不设置的话默认为980px</li><li><code>initial-scale=1.0</code> 初始化的视口大小是1.0倍</li><li><code>maximum-scale=1.0</code> 最大的倍数是1.0倍</li><li><code>user-scalable=0 </code> 不允许缩放视口</li></ul><h2 id="_3、图片" tabindex="-1">3、图片 <a class="header-anchor" href="#_3、图片" aria-label="Permalink to &quot;3、图片&quot;">​</a></h2><img src="'+e+`" alt="添加图片后" style="zoom:67%;"><p>哇，真是好大一张图，它让整个网页看起来都失衡了，水平方向上图片溢出了。不行，必须解决这个问题。可以用CSS给图片指定固定宽度，<strong>但问题是我们想让它能在不同大小的屏幕中自动缩放</strong>。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">img</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#B2CCD6;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100%</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>此时，如果包含图片的元素（比如包含图片的body或div）比图片固有宽度小，图片会缩放占满最大可用空间</strong>。</p><h4 id="为什么不用width-100" tabindex="-1">为什么不用width:100%? <a class="header-anchor" href="#为什么不用width-100" aria-label="Permalink to &quot;为什么不用width:100%?&quot;">​</a></h4><p><strong>在容器比图片宽得多的情况下，图片会被无谓地拉伸。</strong></p><h2 id="_4、手机浏览器内核" tabindex="-1">4、手机浏览器内核 <a class="header-anchor" href="#_4、手机浏览器内核" aria-label="Permalink to &quot;4、手机浏览器内核&quot;">​</a></h2><p>在移动端，仅有四个独立的浏览器内核，分别为微软的Trident、火狐的Gecko、开源内核Webkit、Opera的Presto。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//兼容的前缀：</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ms</span><span style="color:#89DDFF;">-</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">moz</span><span style="color:#89DDFF;">-</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">-</span></span>
<span class="line"><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">webkit</span><span style="color:#89DDFF;">-</span></span></code></pre></div><h2 id="_5、流式布局" tabindex="-1">5、流式布局 <a class="header-anchor" href="#_5、流式布局" aria-label="Permalink to &quot;5、流式布局&quot;">​</a></h2><p><strong>百分比布局也叫作流式布局、弹性盒布局。手机网页没有版心，都左右撑满。</strong> <strong>百分比能够设置的属性是width、height、padding、margin。其他属性比如border、font-size不能用百分比设置的。</strong></p><ul><li>如果用百分比写<code>width</code>，那么指的是父元素<code>width</code>的百分之多少。</li><li>如果用百分比写<code>height</code>，那么指的是父元素<code>height</code>的百分之多少。</li><li>如果用百分比写<code>padding</code>，那么指的是父元素<code>width</code>的百分之多少，无论是水平的<code>padding</code>还是竖直的<code>padding</code>。</li><li>如果用百分比写<code>margin</code>，那么指的是父元素<code>width</code>的百分之多少，无论是水平的<code>margin</code>还是竖直的<code>margin</code>。</li><li>不能用百分比写<code>border</code>的宽度</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">200</span><span style="color:#A6ACCD;">px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">300</span><span style="color:#A6ACCD;">px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">10</span><span style="color:#A6ACCD;">px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	div p</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">%;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">height</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">%;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#FFCB6B;">padding</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">%;</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>​ **此时p的真实宽度是多少？**此时p的真实宽度是140px*190px</p><p><img src="`+t+`" alt="p的盒模型图"></p><h2 id="_6、媒体查询" tabindex="-1">6、媒体查询 <a class="header-anchor" href="#_6、媒体查询" aria-label="Permalink to &quot;6、媒体查询&quot;">​</a></h2><h4 id="为什么响应式-web-设计需要媒体查询" tabindex="-1">为什么响应式 Web 设计需要媒体查询？ <a class="header-anchor" href="#为什么响应式-web-设计需要媒体查询" aria-label="Permalink to &quot;为什么响应式 Web 设计需要媒体查询？&quot;">​</a></h4><p><strong>CSS3媒体查询可以让我们针对特定的设备能力或条件为网页应用特定的CSS样式</strong>。</p><h4 id="媒体查询语法" tabindex="-1">媒体查询语法 <a class="header-anchor" href="#媒体查询语法" aria-label="Permalink to &quot;媒体查询语法&quot;">​</a></h4><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">body</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> grey</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1200px</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> pink</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">700px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1200px</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> blue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">700px</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">body</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#B2CCD6;">background-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> orange</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li><code>@media</code>就表示媒体查询</li><li><code>screen</code>表示看这个网页的设备是显示器</li><li><code>and</code>符号罗列所有的可能性</li></ul><h2 id="_7、rem响应式布局" tabindex="-1">7、rem响应式布局 <a class="header-anchor" href="#_7、rem响应式布局" aria-label="Permalink to &quot;7、rem响应式布局&quot;">​</a></h2><ol><li>一般不要给元素设置<strong>具体的宽度</strong>,但是对于一些小图标可以设定具体宽度值</li><li><strong>高度值</strong>可以设置固定值,设计稿有多大,我们就严格写多大</li><li>所有设置的固定值都用<code>REM</code>做单位(首先在HTML中设置一个基准值：<strong><code>PX</code>和<code>REM</code>的对应比例</strong>,然后在效果图上获取<code>PX</code>值,布局的时候转化为<code>REM</code>值)</li><li>JS获取真实屏幕的宽度,让其除以设计稿的宽度,算出比例,把之前的基准值按照比例进行重新的设定,这样项目就可以在移动端自适应了</li></ol><h4 id="什么是rem-它与em有何区别" tabindex="-1">什么是rem,它与em有何区别? <a class="header-anchor" href="#什么是rem-它与em有何区别" aria-label="Permalink to &quot;什么是rem,它与em有何区别?&quot;">​</a></h4><p><strong>rem</strong>：当前页面中元素的<code>REM</code>单位的样式值都是针对于<strong>HTML元素</strong>的<code>font-size</code>的值进行动态计算的</p><p><strong>em</strong>：表示<strong>父元素</strong>的字号的倍数。(特例：在<code>text-indent</code>属性中，表示<strong>文字宽度</strong>)</p><p><strong>em单位不仅仅可以用来设置字号，还可以设置任何盒模型的属性，比如width、height、padding、margin、border</strong> <strong>rem有一点优势就是可以和媒体查询配合，实现响应式布局：</strong></p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">320px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14px</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">360px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16px</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">400px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18px</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,51),i=[r];function D(F,y,d,C,h,A){return a(),n("div",null,i)}const b=s(c,[["render",D]]);export{m as __pageData,b as default};
