import{_ as s,o as l,c as n,O as o}from"./chunks/framework.23072b34.js";const a="/cocoLib/images/image-20230614122340277.png",p="/cocoLib/images/image-20230614122425884.png",f=JSON.parse('{"title":"二叉树的最近公共祖先","description":"","frontmatter":{},"headers":[],"relativePath":"算法/二叉树/21 二叉树的最近公共祖先.md","filePath":"算法/二叉树/21 二叉树的最近公共祖先.md","lastUpdated":null}'),t={name:"算法/二叉树/21 二叉树的最近公共祖先.md"},e=o('<h1 id="二叉树的最近公共祖先" tabindex="-1">二叉树的最近公共祖先 <a class="header-anchor" href="#二叉树的最近公共祖先" aria-label="Permalink to &quot;二叉树的最近公共祖先&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Question</p><p>给定一个二叉树, 找到该树中两个指定节点的<strong>最近公共祖先</strong>。</p><p><strong>最近公共祖先</strong>的定义为：对于有根树<code> T</code> 的两个节点<code> p</code>、<code>q</code>，最近公共祖先表示为一个节点<code> x</code>，满足 <code>x</code> 是<code> p</code>、<code>q </code>的祖先且 <code>x </code>的深度尽可能大（一个节点也可以是它自己的祖先）。</p></div><p><img src="'+a+'" alt="image-20230614122340277" style="zoom:60%;"><img src="'+p+`" alt="image-20230614122425884" style="zoom:60%;"></p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>分情况讨论：</p><ul><li><code>p</code>、<code>q</code>是兄弟：最近公共祖先是父节点</li><li><code>p</code>、<code>q</code>是平级但不是同一个父节点：最近公共祖先是父节点的父节点的……</li><li><code>p</code>、<code>q</code>是祖先关系：最近公共祖先是<code>p</code>或<code>q</code></li></ul><p>遇到这个题目首先想的是要是能<strong>自底向上查找</strong>就好了，如果两个节点自底向上最终交汇到一个节点，那个节点就是最近公共祖先。</p><p>如果想要从下往上，用<strong>后序遍历</strong>，递归的返回值应该是<code>p</code>或<code>q</code>节点，如果返回值不为空说明找到了目标节点</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> lowestCommonAncestor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">root</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">q</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//终止条件</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">===null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;">q</span><span style="color:#F07178;">)  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//单层逻辑</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">lowestCommonAncestor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">lowestCommonAncestor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">root</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">q</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">===null&amp;&amp;</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">===null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">//左右子树都没找到</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">===null&amp;&amp;</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">!=null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//右子树找到了</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">right</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">!=null&amp;&amp;</span><span style="color:#A6ACCD;">right</span><span style="color:#89DDFF;">===null</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//左子树找到了</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">                     </span><span style="color:#676E95;font-style:italic;">//左右子树都找到了</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div>`,9),c=[e];function r(y,F,D,i,A,C){return l(),n("div",null,c)}const _=s(t,[["render",r]]);export{f as __pageData,_ as default};
