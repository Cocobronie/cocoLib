import{_ as i,o as e,c as o,O as a}from"./chunks/framework.23072b34.js";const l="/cocoLib/images/image-20230624185740619.png",m=JSON.parse('{"title":"CSS元素的隐藏","description":"","frontmatter":{},"headers":[],"relativePath":"CSS/HTML +CSS/09 CSS元素的隐藏.md","filePath":"CSS/HTML +CSS/09 CSS元素的隐藏.md","lastUpdated":null}'),t={name:"CSS/HTML +CSS/09 CSS元素的隐藏.md"},d=a('<h1 id="css元素的隐藏" tabindex="-1">CSS元素的隐藏 <a class="header-anchor" href="#css元素的隐藏" aria-label="Permalink to &quot;CSS元素的隐藏&quot;">​</a></h1><h2 id="display-属性" tabindex="-1">display 属性 <a class="header-anchor" href="#display-属性" aria-label="Permalink to &quot;display 属性&quot;">​</a></h2><p><code>display </code>属性用于设置一个元素应如何显示。</p><ul><li><code>display: none ；</code>隐藏对象</li><li><code>display：block ；</code>除了转换为块级元素之外，同时还有显示元素的意思</li><li><code>display </code>隐藏元素后，不再占有原来的位置。</li></ul><h2 id="visibility-可见性" tabindex="-1">visibility 可见性 <a class="header-anchor" href="#visibility-可见性" aria-label="Permalink to &quot;visibility 可见性&quot;">​</a></h2><p><code>visibility</code> 属性用于指定一个元素应可见还是隐藏。</p><ul><li><code>visibility：visible ; </code>元素可视</li><li><code>visibility：hidden; </code>元素隐藏</li><li><code>visibility</code> 隐藏元素后，继续占有原来的位置。</li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden </code></li><li>如果隐藏元素不想要原来位置， 就用<code> display：none</code> (用处更多 重点）</li></ul><h2 id="overflow-溢出" tabindex="-1">overflow 溢出 <a class="header-anchor" href="#overflow-溢出" aria-label="Permalink to &quot;overflow 溢出&quot;">​</a></h2><p><code>overflow</code> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><img src="'+l+'" alt="image-20230624185740619" style="zoom:50%;">',10),s=[d];function c(r,n,_,S,p,h){return e(),o("div",null,s)}const y=i(t,[["render",c]]);export{m as __pageData,y as default};
