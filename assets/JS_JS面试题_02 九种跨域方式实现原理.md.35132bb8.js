import{_ as o,o as e,c as a,O as t}from"./chunks/framework.23072b34.js";const i="/cocoLib/images/1638b3579dde630etplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",r="/cocoLib/images/1685c5bed77e7788tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",b=JSON.parse('{"title":"九种跨域方式实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"JS/JS面试题/02 九种跨域方式实现原理.md","filePath":"JS/JS面试题/02 九种跨域方式实现原理.md","lastUpdated":null}'),n={name:"JS/JS面试题/02 九种跨域方式实现原理.md"},l=t('<h1 id="九种跨域方式实现原理" tabindex="-1">九种跨域方式实现原理 <a class="header-anchor" href="#九种跨域方式实现原理" aria-label="Permalink to &quot;九种跨域方式实现原理&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">参考</p><p><a href="https://juejin.cn/post/6844903767226351623" target="_blank" rel="noreferrer">九种跨域方式实现原理（完整版） - 掘金 (juejin.cn)</a></p></div><ol><li>什么是跨域？</li><li>什么是同源策略及其限制内容？</li><li>有哪些常见跨域场景？</li><li>有哪几种跨域方式？</li></ol><h2 id="_1、什么是跨域" tabindex="-1">1、什么是跨域？ <a class="header-anchor" href="#_1、什么是跨域" aria-label="Permalink to &quot;1、什么是跨域？&quot;">​</a></h2><h3 id="_1-1-什么是同源策略及其限制内容" tabindex="-1">1.1 什么是同源策略及其限制内容？ <a class="header-anchor" href="#_1-1-什么是同源策略及其限制内容" aria-label="Permalink to &quot;1.1 什么是同源策略及其限制内容？&quot;">​</a></h3><p><strong>同源策略：</strong></p><p>同源是指&quot;协议+域名+端口&quot;三者相同，<strong>即便两个不同的域名指向同一个ip地址，也非同源</strong>。</p><p><strong>同源策略限制内容有：</strong></p><ul><li>Cookie、LocalStorage、IndexedDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 请求发送后，结果被浏览器拦截了</li></ul><p><strong>有三个标签是允许跨域加载资源：</strong></p><ul><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ul><h3 id="_1-2-常见跨域场景" tabindex="-1">1.2 常见跨域场景 <a class="header-anchor" href="#_1-2-常见跨域场景" aria-label="Permalink to &quot;1.2 常见跨域场景&quot;">​</a></h3><p><strong>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域</strong>。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><img src="'+i+'" alt="img" style="zoom:57%;"><p>特别说明两点：</p><p><strong>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。</strong></p><p><strong>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”</strong>。</p><p>这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong></p><p><strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong>。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="_2、跨域解决方案" tabindex="-1">2、跨域解决方案 <a class="header-anchor" href="#_2、跨域解决方案" aria-label="Permalink to &quot;2、跨域解决方案&quot;">​</a></h2><h3 id="_2-1-jsonp-script" tabindex="-1">2.1 jsonp（<code>&lt;script&gt;</code>） <a class="header-anchor" href="#_2-1-jsonp-script" aria-label="Permalink to &quot;2.1 jsonp（`&lt;script&gt;`）&quot;">​</a></h3><h4 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h4><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。<strong>JSONP请求一定需要对方的服务器做支持才可以</strong>。</p><h4 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h4><ul><li>优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。</li><li>缺点是仅支持<code>get</code>方法具有局限性,不安全可能会遭受<code>XSS</code>攻击。</li></ul><h3 id="_2-2-cors-服务器端" tabindex="-1">2.2 cors(服务器端) <a class="header-anchor" href="#_2-2-cors-服务器端" aria-label="Permalink to &quot;2.2 cors(服务器端)&quot;">​</a></h3><p>浏览器会自动进行 <code>CORS</code> 通信，实现 <code>CORS</code> 通信的关键是后端。只要后端实现了 <code>CORS</code>，就实现了跨域。</p><p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 <code>CORS</code>。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p><p>虽然设置 <code>CORS </code>和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求</strong>。</p><h4 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h4><p>只要同时满足以下两大条件，就属于简单请求</p><p>条件1：使用下列方法之一：</p><ul><li>GET</li><li>HEAD</li><li>POST</li></ul><p>条件2：Content-Type 的值仅限于下列三者之一：</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><h4 id="复杂请求" tabindex="-1">复杂请求 <a class="header-anchor" href="#复杂请求" aria-label="Permalink to &quot;复杂请求&quot;">​</a></h4><p>不符合以上条件的请求就肯定是复杂请求了。 复杂请求的<code>CORS</code>请求，会在正式通信之前，增加一次<code>HTTP</code>查询请求，称为&quot;预检&quot;请求,该请求是 <code>option</code> 方法的，通过该请求来知道服务端是否允许跨域请求。</p><h3 id="_2-3-postmessage-window属性" tabindex="-1">2.3 postMessage(window属性) <a class="header-anchor" href="#_2-3-postmessage-window属性" aria-label="Permalink to &quot;2.3 postMessage(window属性)&quot;">​</a></h3><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的<strong>window属性</strong>之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p><strong>postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递</strong>。</p><h3 id="_2-4-websocket-应用层协议" tabindex="-1">2.4 websocket(应用层协议) <a class="header-anchor" href="#_2-4-websocket-应用层协议" aria-label="Permalink to &quot;2.4 websocket(应用层协议)&quot;">​</a></h3><p>Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的<strong>全双工通信</strong>，同时也是跨域的一种解决方案。WebSocket和HTTP都是<strong>应用层协议</strong>，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p><h3 id="_2-5-node中间件代理-两次跨域" tabindex="-1">2.5 Node中间件代理(两次跨域) <a class="header-anchor" href="#_2-5-node中间件代理-两次跨域" aria-label="Permalink to &quot;2.5  Node中间件代理(两次跨域)&quot;">​</a></h3><p>实现原理：<strong>同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。</strong> 代理服务器，需要做以下几个步骤：</p><ul><li>接受客户端请求 。</li><li>将请求 转发给服务器。</li><li>拿到服务器 响应 数据。</li><li>将 响应 转发给客户端。</li></ul><img src="'+r+'" alt="img" style="zoom:80%;"><h3 id="_2-6-nginx反向代理" tabindex="-1">2.6 nginx反向代理 <a class="header-anchor" href="#_2-6-nginx反向代理" aria-label="Permalink to &quot;2.6 nginx反向代理&quot;">​</a></h3><p>实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。</p><p>使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。</p><h3 id="_2-7-window-name-iframe" tabindex="-1">2.7 window.name + iframe <a class="header-anchor" href="#_2-7-window-name-iframe" aria-label="Permalink to &quot;2.7 window.name + iframe&quot;">​</a></h3><p><strong><code>window.name</code>属性的独特之处</strong>：<code>name</code>值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的<code> name</code> 值（2MB）。</p><p>通过<code>iframe</code>的<code>src</code>属性<strong>由外域转向本地域</strong>，跨域数据即由<code>iframe</code>的<code>window.name</code>从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="_2-8-location-hash-iframe" tabindex="-1">2.8 location.hash + iframe <a class="header-anchor" href="#_2-8-location-hash-iframe" aria-label="Permalink to &quot;2.8 location.hash + iframe&quot;">​</a></h3><p>实现原理： a.html欲与c.html跨域相互通信，通过中间页b.html来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><h3 id="_2-9-document-domain-iframe" tabindex="-1">2.9 document.domain + iframe <a class="header-anchor" href="#_2-9-document-domain-iframe" aria-label="Permalink to &quot;2.9 document.domain + iframe&quot;">​</a></h3><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</strong>。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><p>**实现原理：**两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><h2 id="_3、总结" tabindex="-1">3、总结 <a class="header-anchor" href="#_3、总结" aria-label="Permalink to &quot;3、总结&quot;">​</a></h2><ul><li><strong>CORS</strong>支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案</li><li><strong>JSONP</strong>只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</li><li>不管是<strong>Node中间件代理</strong>还是<strong>nginx反向代理</strong>，主要是通过同源策略对服务器不加限制。</li><li>日常工作中，用得比较多的跨域方案是<strong>cors和nginx反向代理</strong></li></ul>',60),s=[l];function c(d,h,p,m,g,u){return e(),a("div",null,s)}const f=o(n,[["render",c]]);export{b as __pageData,f as default};
