import{_ as t,o,c as e,O as a}from"./chunks/framework.23072b34.js";const s="/cocoLib/images/image-20230617114449934.png",u=JSON.parse('{"title":"N皇后(hard)","description":"","frontmatter":{},"headers":[],"relativePath":"算法/回溯/14 N皇后.md","filePath":"算法/回溯/14 N皇后.md","lastUpdated":null}'),n={name:"算法/回溯/14 N皇后.md"},r=a('<h1 id="n皇后-hard" tabindex="-1">N皇后(hard) <a class="header-anchor" href="#n皇后-hard" aria-label="Permalink to &quot;N皇后(hard)&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Question</p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>Q</code> 和 <code>.</code> 分别代表了<strong>皇后和空位</strong>。</p></div><img src="'+s+'" alt="image-20230617114449934" style="zoom:67%;">',3),c=[r];function _(d,i,p,l,m,h){return o(),e("div",null,c)}const N=t(n,[["render",_]]);export{u as __pageData,N as default};
