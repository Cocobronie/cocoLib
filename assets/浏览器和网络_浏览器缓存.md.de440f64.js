import{_ as o,o as e,c as a,O as r}from"./chunks/framework.23072b34.js";const t="/cocoLib/images/1681c21e04552f77tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",c="/cocoLib/images/1680f1fc39ddc277tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",i="/cocoLib/images/1637d0bbd695e751tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",s="/cocoLib/images/1681467d825b2ebetplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",d="/cocoLib/images/1637d0bbda96ac60tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",n="/cocoLib/images/16814782b5e34670tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",l="/cocoLib/images/168196be6f2b9438tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",h="/cocoLib/images/1681964d963c5a86tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp",M=JSON.parse('{"title":"浏览器缓存","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器和网络/浏览器缓存.md","filePath":"浏览器和网络/浏览器缓存.md","lastUpdated":null}'),g={name:"浏览器和网络/浏览器缓存.md"},p=r('<h1 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h1><p><a href="https://juejin.cn/post/6844903757872889870" target="_blank" rel="noreferrer">深入浅出浏览器缓存机制 - 掘金 (juejin.cn)</a></p><ol><li><strong>什么是浏览器缓存？</strong></li><li><strong>浏览器缓存有什么用？</strong></li><li><strong>有哪四种缓存方式？有什么区别？</strong></li><li><strong>浏览器怎么确定一个资源该不该缓存，如何去缓存呢？</strong></li><li><strong>什么是强缓存？</strong></li><li><strong>强缓存如何实现？</strong></li><li><strong>什么是Expires？</strong></li><li><strong>什么是Cache-Control？</strong></li><li><strong>Expires和Cache-Control对比？</strong></li><li><strong>什么是协商缓存？为了解决什么问题？</strong></li><li><strong>Last-Modified和If-Modified-Since有什么作用？</strong></li><li><strong>ETag和If-None-Match有什么作用？</strong></li><li><strong>Last-Modified和ETag对比？</strong></li><li><strong>如果什么缓存策略都没设置，那么浏览器会怎么处理?</strong></li><li><strong>强缓存和协商缓存对比？</strong></li><li><strong>对于频繁变动的资源应用什么缓存策略？</strong></li><li><strong>对于不常变化的资源应用什么缓存策略？</strong></li><li><strong>用户打开网页，地址栏输入url会触发怎样的缓存策略？</strong></li><li><strong>普通刷新 (F5)会触发怎样的缓存策略？</strong></li><li><strong>强制刷新 (Ctrl + F5)会触发怎样的缓存策略？</strong></li></ol><h2 id="_1、浏览器缓存概述" tabindex="-1">1、浏览器缓存概述 <a class="header-anchor" href="#_1、浏览器缓存概述" aria-label="Permalink to &quot;1、浏览器缓存概述&quot;">​</a></h2><p><img src="'+t+'" alt="img"></p><p><strong>浏览器缓存有什么用？</strong></p><p>缓存可以说是性能优化中简单高效的一种优化方式了。一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。</p><p>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p><h2 id="_2、缓存位置" tabindex="-1">2、缓存位置 <a class="header-anchor" href="#_2、缓存位置" aria-label="Permalink to &quot;2、缓存位置&quot;">​</a></h2><p>从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><h3 id="_2-1-service-worker" tabindex="-1">2.1 Service Worker <a class="header-anchor" href="#_2-1-service-worker" aria-label="Permalink to &quot;2.1 Service Worker&quot;">​</a></h3><p>Service Worker 是运行在浏览器背后的独立线程</p><p><strong>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</strong>。</p><p>Service Worker 实现缓存功能一般分为三个步骤：</p><ul><li>首先需要先注册 <code>Service Worker</code></li><li>然后监听到<code>install</code>事件以后就可以缓存需要的文件</li><li>那么在下次用户访问的时候就可以通过<strong>拦截请求</strong>的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</li></ul><h3 id="_2-2-memory-cache" tabindex="-1">2.2 Memory Cache <a class="header-anchor" href="#_2-2-memory-cache" aria-label="Permalink to &quot;2.2 Memory Cache&quot;">​</a></h3><p>Memory Cache 也就是<strong>内存</strong>中的缓存，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 <strong>一旦我们关闭 Tab 页面，内存中的缓存也就被释放了</strong>。</p><p><img src="'+c+'" alt="img"></p><p>内存缓存中有一块重要的缓存资源是<code>preloader</code>相关指令（例如<code>&lt;link rel=&quot;prefetch&quot;&gt;</code>）下载的资源。总所周知<code>preloader</code>的相关指令已经是页面优化的常见手段之一，它可以一边解析<code>js/css</code>文件，一边网络请求下一个资源。</p><p>需要注意的事情是，<strong>内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验</strong>。</p><h3 id="_2-3-disk-cache" tabindex="-1">2.3 Disk Cache <a class="header-anchor" href="#_2-3-disk-cache" aria-label="Permalink to &quot;2.3 Disk Cache&quot;">​</a></h3><p>Disk Cache 也就是存储在<strong>硬盘</strong>中的缓存，读取速度慢点，但是什么都能存储到磁盘中，<strong>比之 Memory Cache 胜在容量和存储时效性上</strong>。</p><h3 id="_2-4-push-cache" tabindex="-1">2.4 Push Cache <a class="header-anchor" href="#_2-4-push-cache" aria-label="Permalink to &quot;2.4 Push Cache&quot;">​</a></h3><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂</strong>，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。</p><p>如果以上四种缓存都没有命中的话，那么只能发起请求来获取资源了。</p><p>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，<strong>通常浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的</strong>。</p><h2 id="_3、缓存过程分析" tabindex="-1">3、缓存过程分析 <a class="header-anchor" href="#_3、缓存过程分析" aria-label="Permalink to &quot;3、缓存过程分析&quot;">​</a></h2><img src="'+i+'" alt="第一次发起HTTP请求" style="zoom:80%;"><ul><li>浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识</li><li>浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中</li></ul><h2 id="_4、强缓存" tabindex="-1">4、强缓存 <a class="header-anchor" href="#_4、强缓存" aria-label="Permalink to &quot;4、强缓存&quot;">​</a></h2><p>**强缓存：**不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的<code>Network</code>选项中可以看到该请求返回200的状态码，并且<code>Size</code>显示<code>from disk cache</code>或<code>from memory cache</code>。</p><p>强缓存判断是否缓存的依据来自于<strong>是否超出某个时间或者某个时间段</strong>，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容</p><p>强缓存可以通过设置两种<code> HTTP Header</code> 实现：<code>Expires</code> 和<code> Cache-Control</code>。</p><h3 id="_4-1-expires" tabindex="-1">4.1 Expires <a class="header-anchor" href="#_4-1-expires" aria-label="Permalink to &quot;4.1 Expires&quot;">​</a></h3><p><strong>Expires：缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点</strong>。</p><p>Expires是Web<strong>服务器</strong>响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。</p><p><code>Expires: Wed, 22 Oct 2018 08:41:00 GMT</code> 表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。</p><h3 id="_4-2-cache-control" tabindex="-1">4.2 Cache-Control <a class="header-anchor" href="#_4-2-cache-control" aria-label="Permalink to &quot;4.2 Cache-Control&quot;">​</a></h3><p><code>Cache-Control</code>主要用于<strong>控制网页缓存</strong>。比如当<code>Cache-Control:max-age=300</code>时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中<strong>强缓存</strong>。</p><p><code>Cache-Control</code> 可以在请求头或者响应头中设置，并且可以组合使用多种指令：</p><p><img src="'+s+'" alt="img"></p><h3 id="_4-3-expires和cache-control两者对比" tabindex="-1">4.3 Expires和Cache-Control两者对比 <a class="header-anchor" href="#_4-3-expires和cache-control两者对比" aria-label="Permalink to &quot;4.3 Expires和Cache-Control两者对比&quot;">​</a></h3><p>其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，<strong>两者同时存在的话，Cache-Control优先级高于Expires</strong>；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。</p><h2 id="_5、协商缓存" tabindex="-1">5、协商缓存 <a class="header-anchor" href="#_5、协商缓存" aria-label="Permalink to &quot;5、协商缓存&quot;">​</a></h2><p><strong>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况</strong>：</p><ul><li><p>协商缓存生效，返回304和Not Modified</p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/5/20/1637d0bbd6cd702d~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp" alt="协商缓存生效" style="zoom:80%;"></li><li><p>协商缓存失效，返回200和请求结果</p></li></ul><img src="'+d+'" alt="协商缓存失效" style="zoom:80%;"><p>协商缓存可以通过设置两种 HTTP Header 实现：<code>Last-Modified </code>和<code> ETag</code> 。</p><h3 id="_5-1-last-modified和if-modified-since" tabindex="-1">5.1 Last-Modified和If-Modified-Since <a class="header-anchor" href="#_5-1-last-modified和if-modified-since" aria-label="Permalink to &quot;5.1 Last-Modified和If-Modified-Since&quot;">​</a></h3><p>浏览器在第一次访问资源时，服务器返回资源的同时，在<code>response header</code>中添加<code> Last-Modified</code>的<code>header</code>，值是这个资源<strong>在服务器上的最后修改时间</strong>，浏览器接收后缓存文件和<code>header</code>；</p><p><strong>浏览器</strong>下一次请求这个资源，浏览器检测到有<code> Last-Modified</code>这个<code>header</code>，于是添加<code>If-Modified-Since</code>这个<code>header</code>，值就是<code>Last-Modified</code>中的值；</p><p><strong>服务器</strong>再次收到这个资源请求，会根据<code>If-Modified-Since</code>中的值与服务器中这个资源的最后修改时间对比，如果没有变化，<strong>返回304和空的响应体</strong>，直接从缓存读取，如果<code>If-Modified-Since</code>的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是<strong>返回新的资源文件和200</strong></p><img src="'+n+'" alt="img" style="zoom:80%;"><h4 id="但是-last-modified-存在一些弊端" tabindex="-1">但是 Last-Modified 存在一些弊端： <a class="header-anchor" href="#但是-last-modified-存在一些弊端" aria-label="Permalink to &quot;但是 Last-Modified 存在一些弊端：&quot;">​</a></h4><ul><li>如果本地打开<strong>缓存文件</strong>，即使没有对文件进行修改，但还是会造成<code>Last-Modified</code>被修改，服务端不能命中缓存导致发送相同的资源</li><li>因为 <code>Last-Modified </code>只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li></ul><p>既然根据文件修改时间来决定是否缓存尚有不足，能否可以<strong>直接根据文件内容</strong>是否修改来决定缓存策略？所以在 HTTP / 1.1 出现了 <code>ETag</code> 和<code>If-None-Match</code></p><h3 id="_2-etag和if-none-match" tabindex="-1">2.ETag和If-None-Match <a class="header-anchor" href="#_2-etag和if-none-match" aria-label="Permalink to &quot;2.ETag和If-None-Match&quot;">​</a></h3><p><strong>Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成</strong>。</p><p><strong>浏览器</strong>在下一次加载资源向服务器发送请求时，会将上一次返回的<code>Etag</code>值放到<code>request header</code>里的<code>If-None-Match</code>里，<strong>服务器</strong>只需要比较客户端传来的<code>If-None-Match</code>跟自己服务器上该资源的<code>ETag</code>是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现<code>ETag</code>匹配不上，那么直接以<strong>常规GET 200回包</strong>形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接<strong>返回304</strong>知会客户端直接使用本地缓存即可。</p><p><img src="'+l+'" alt="ETag和If-None-Match"></p><h3 id="_3-两者之间对比" tabindex="-1">3.两者之间对比： <a class="header-anchor" href="#_3-两者之间对比" aria-label="Permalink to &quot;3.两者之间对比：&quot;">​</a></h3><ul><li>首先在<strong>精确度</strong>上，<code>Etag</code>要优于<code>Last-Modified</code>。</li></ul><p><code>Last-Modified</code>的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的<code>Last-Modified</code>其实并没有体现出来修改，但是<code>Etag</code>每次都会改变确保了精度；如果是<strong>负载均衡</strong>的服务器，各个服务器生成的<code>Last-Modified</code>也有可能不一致。</p><ul><li>第二在<strong>性能</strong>上，<code>Etag</code>要逊于<code>Last-Modified</code>，毕竟<code>Last-Modified</code>只需要记录时间，而<code>Etag</code>需要服务器通过算法来计算出一个<code>hash</code>值。</li><li>第三在<strong>优先级</strong>上，服务器校验优先考虑<code>Etag</code></li></ul><h2 id="_6、缓存机制" tabindex="-1">6、缓存机制 <a class="header-anchor" href="#_6、缓存机制" aria-label="Permalink to &quot;6、缓存机制&quot;">​</a></h2><p><strong>强制缓存优先于协商缓存进行</strong>，若<strong>强制缓存(Expires和Cache-Control)<strong>生效则直接使用缓存，若不生效则进行</strong>协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)</strong>，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。具体流程图如下：</p><p><img src="'+h+'" alt="缓存的机制"></p><p>看到这里，不知道你是否存在这样一个疑问:<strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong></p><p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为<strong>缓存时间</strong>。</p><h2 id="_7、实际场景应用缓存策略" tabindex="-1">7、实际场景应用缓存策略 <a class="header-anchor" href="#_7、实际场景应用缓存策略" aria-label="Permalink to &quot;7、实际场景应用缓存策略&quot;">​</a></h2><h3 id="_7-1-频繁变动的资源" tabindex="-1">7.1 频繁变动的资源 <a class="header-anchor" href="#_7-1-频繁变动的资源" aria-label="Permalink to &quot;7.1 频繁变动的资源&quot;">​</a></h3><blockquote><p>Cache-Control: no-cache</p></blockquote><p>对于频繁变动的资源，首先需要使用<code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器（取消<strong>强缓存</strong>），然后配合<code>ETag</code>或者 <code>Last-Modified </code>来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p><h3 id="_2-不常变化的资源" tabindex="-1">2.不常变化的资源 <a class="header-anchor" href="#_2-不常变化的资源" aria-label="Permalink to &quot;2.不常变化的资源&quot;">​</a></h3><blockquote><p>Cache-Control: max-age=31536000</p></blockquote><p>通常在处理这类资源时，给它们的<code> Cache-Control</code> 配置一个很大的 <code>max-age=31536000</code> (一年)，这样浏览器之后请求相同的 URL 会<strong>命中强制缓存</strong>。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。 在线提供的类库 (如 <code>jquery-3.3.1.min.js</code>, <code>lodash.min.js</code> 等) 均采用这个模式。</p><h2 id="_8、用户行为对浏览器缓存的影响" tabindex="-1">8、用户行为对浏览器缓存的影响 <a class="header-anchor" href="#_8、用户行为对浏览器缓存的影响" aria-label="Permalink to &quot;8、用户行为对浏览器缓存的影响&quot;">​</a></h2><p>所谓用户行为对浏览器缓存的影响，指的就是用户在浏览器如何操作时，会触发怎样的缓存策略。主要有 3 种：</p><ul><li><strong>打开网页，地址栏输入地址：</strong> 查找<code> disk cache</code> 中是否有匹配。如有则使用；如没有则发送网络请求。</li><li><strong>普通刷新 (F5)</strong>：因为 TAB 并没有关闭，因此 <code>memory cache</code> 是可用的，会被优先使用(如果匹配的话)。其次才是 <code>disk cache</code>。</li><li><strong>强制刷新 (Ctrl + F5)</strong>：浏览器不使用缓存，因此发送的请求头部均带有 <code>Cache-control: no-cache</code>(为了兼容，还带了 <code>Pragma: no-cache</code>),服务器直接返回 200 和最新内容。</li></ul>',80),m=[p];function f(_,u,b,k,x,C){return e(),a("div",null,m)}const T=o(g,[["render",f]]);export{M as __pageData,T as default};
