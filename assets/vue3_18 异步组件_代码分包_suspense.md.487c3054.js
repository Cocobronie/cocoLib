import{_ as s,o as a,c as n,O as o}from"./chunks/framework.23072b34.js";const l="/cocoLib/assets/7ed2bfd4981743da989f2ce8a89ff7catplv-k3u1fbpfcp-zoom-in-crop-mark4536000.283e548f.webp",d=JSON.parse('{"title":"异步组件&代码分包&suspense","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/18 异步组件&代码分包&suspense.md","filePath":"vue3/18 异步组件&代码分包&suspense.md","lastUpdated":null}'),p={name:"vue3/18 异步组件&代码分包&suspense.md"},e=o('<h1 id="异步组件-代码分包-suspense" tabindex="-1">异步组件&amp;代码分包&amp;suspense <a class="header-anchor" href="#异步组件-代码分包-suspense" aria-label="Permalink to &quot;异步组件&amp;代码分包&amp;suspense&quot;">​</a></h1><h2 id="异步组件" tabindex="-1">异步组件 <a class="header-anchor" href="#异步组件" aria-label="Permalink to &quot;异步组件&quot;">​</a></h2><p>在大型应用中，我们可能需要将应用分割成小一些的代码块 并且<strong>减少主包的体积</strong>，这时候就可以使用异步组件</p><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><p><a href="https://juejin.cn/post/7067851523035758600" target="_blank" rel="noreferrer">Promise简述与用法 - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/6844904063570542599" target="_blank" rel="noreferrer">这一次，彻底弄懂 Promise 原理 - 掘金 (juejin.cn)</a></p><h3 id="什么是promise" tabindex="-1">什么是Promise <a class="header-anchor" href="#什么是promise" aria-label="Permalink to &quot;什么是Promise&quot;">​</a></h3><p><img src="'+l+`" alt="Snipaste_2021-09-27_14-59-26.png"></p><p><strong>Promise是JS中进行异步编程的新的解决方案</strong></p><ul><li><code>promise</code> 是一个<strong>构造函数</strong></li><li><code>Promise</code> 的构造函数接收一个函数为参数，并且传入两个参数：<strong>resolve，reject</strong>，分别表示<strong>异步操作</strong>执行<strong>成功</strong>后的回调函数和异步操作执行<strong>失败</strong>后的回调函数。</li></ul><h3 id="为什么要用promise" tabindex="-1">为什么要用Promise <a class="header-anchor" href="#为什么要用promise" aria-label="Permalink to &quot;为什么要用Promise&quot;">​</a></h3><ol><li>指定回调函数的方法更加灵活</li><li>支持<strong>链式调用</strong> ，可以解决回调函数问题</li></ol><h3 id="promise-prototype-then-方法" tabindex="-1"><code>Promise.prototype.then</code> 方法 <a class="header-anchor" href="#promise-prototype-then-方法" aria-label="Permalink to &quot;\`Promise.prototype.then\` 方法&quot;">​</a></h3><p>说明：<code>.then() </code>方法用来<strong>预先指定成功和失败的回调函数</strong>，调用 <code>.then() </code>方法时，成功的回调函数是<strong>必选</strong>的，失败的回调函数是<strong>可选</strong>的</p><p><strong>返回一个新的 promise 对象</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(onResolved</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onRejected) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">onResolved </span><span style="color:#FFCB6B;">函数</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">成功的回调函数</span><span style="color:#A6ACCD;"> (value) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> 	</span><span style="color:#676E95;font-style:italic;">//必选</span></span>
<span class="line"><span style="color:#A6ACCD;">onRejected </span><span style="color:#FFCB6B;">函数</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">失败的回调函数</span><span style="color:#A6ACCD;"> (reason) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> 	</span><span style="color:#676E95;font-style:italic;">//可选</span></span></code></pre></div><h3 id="promise-resolve" tabindex="-1"><code>Promise.resolve()</code> <a class="header-anchor" href="#promise-resolve" aria-label="Permalink to &quot;\`Promise.resolve()\`&quot;">​</a></h3><ol><li><p><strong>什么是resolve函数?</strong></p><ul><li><p>它是<code>Promise</code>对象的成功回调函数，当<code>Promise</code>对象内部状态变为成功时，会调用<code>resolve</code>函数.</p></li><li><p><code>resolve</code>函数传入一个参数,该参数可以是任何值,通常是表示完成成功当前任务的<strong>结果</strong>。</p></li><li><p><code>resolve</code>函数返回一个<code>Promise</code>对象,表示其内部操作已经成功完成。</p></li></ul></li><li><p><strong>resolve函数的作用</strong><code>resolve</code>函数的作用是解决异步任务，使异步操作变为有序的。它的出现,使得我们在处理复杂的异步操作时,可以通过控制<code>resolve</code>函数的执行顺序，实现顺序操作流程的效果。正是由于有了resolve函数，我们可以非常容易地处理复杂的异步任务。</p></li><li><p><strong>resolve函数的特性</strong></p><ul><li><code>resolve</code>函数是可以接收任何类型的参数，并且可以将任意类型的参数作为<code>Promise</code>对象的结果传递给<code>then</code>回调函数。</li><li><code>resolve</code>函数可以将异步操作转化为有序的流程，只要通过控制<code>resolve</code>函数的执行顺序就可以处理复杂的异步操作。</li><li><code>resolve</code>函数是单线程的,不会同时执行多个<code>resolve</code>函数，只有当前的<code>resolve</code>函数执行完毕，才能执行下一个<code>resolve</code>函数。</li></ul></li></ol><h2 id="原生ajax封装axios" tabindex="-1">原生Ajax封装axios <a class="header-anchor" href="#原生ajax封装axios" aria-label="Permalink to &quot;原生Ajax封装axios&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> axios </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)				</span><span style="color:#676E95;font-style:italic;">//创建http请求</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">//请求状态改变的事件触发器（readyState变化时会调用此方法）</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readystate</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//模拟网络延迟</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">		</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseText</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">2000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)					</span><span style="color:#676E95;font-style:italic;">//发送请求给服务器</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="顶层-await" tabindex="-1">顶层 <code>await</code> <a class="header-anchor" href="#顶层-await" aria-label="Permalink to &quot;顶层 \`await\`&quot;">​</a></h2><p><a href="https://www.bookstack.cn/read/es6-3rd/spilt.7.docs-async.md" target="_blank" rel="noreferrer">20. async 函数 - 顶层 await - 《阮一峰 ECMAScript 6 (ES6) 标准入门教程 第三版》 - 书栈网 · BookStack</a></p><p>根据语法规格，<code>await</code>命令只能出现在 <code>async</code> 函数内部，否则都会报错。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://api.example.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>目前，有一个<strong>语法提案</strong>，允许在模块的顶层独立使用<code>await</code>命令，使得上面那行代码不会报错了。这个提案的目的，是借用<code>await</code>解决模<strong>块异步加载</strong>的问题。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// awaiting.js</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> output</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">(async function1 </span><span style="color:#82AAFF;">main</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  const dynamic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(someMission);</span></span>
<span class="line"><span style="color:#A6ACCD;">  const data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url);</span></span>
<span class="line"><span style="color:#A6ACCD;">  output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someProcess</span><span style="color:#A6ACCD;">(dynamic</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> data);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">output</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span></code></pre></div><p>我们把异步操作包装在一个 <code>async</code> 函数里面，只有等里面的异步操作都执行，变量 <code>output</code> 才会有值，否则就返回 <code>undefined</code></p><p>那么其他模块引入<code>output</code>时就可能获得<code>undefined</code>导致<strong>报错</strong>，模块的使用者需要知道依赖模块的内部有没有异步操作破坏了封装性。</p><p>为了解决这个问题，引入<strong>顶层<code>await</code></strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// awaiting.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dynamic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(someMission)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">someProcess</span><span style="color:#A6ACCD;">((</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> dynamic)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> data)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>上面代码中，两个异步操作在输出的时候，都加上了<code>await</code>命令。只有等到异步操作完成，这个模块才会输出值。</p><p>模块的使用者完全不用关心，依赖模块的内部有没有异步操作，正常加载即可。</p><h2 id="suspense" tabindex="-1">suspense <a class="header-anchor" href="#suspense" aria-label="Permalink to &quot;suspense&quot;">​</a></h2><h3 id="子组件" tabindex="-1">子组件 <a class="header-anchor" href="#子组件" aria-label="Permalink to &quot;子组件&quot;">​</a></h3><p>在组件内部使用了<strong>顶层 <code>await</code><strong>技术，组件变为</strong>异步组件</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">{{data.name}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> axios </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Data</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(url)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="父组件" tabindex="-1">父组件 <a class="header-anchor" href="#父组件" aria-label="Permalink to &quot;父组件&quot;">​</a></h3><ul><li><strong>异步组件的引入方式</strong>(两种)</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">defineAsyncComponent</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SyncVue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineAsyncComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 	</span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/component/sync.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))		</span><span style="color:#676E95;font-style:italic;">//第一种</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SyncVue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineAsyncComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//第二种</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">loadingCompnent</span><span style="color:#89DDFF;">:()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/component/sync.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    errorComponent：</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><ul><li><strong>异步组件的使用方式</strong></li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Suspense</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">					//</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Suspense</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">默认提供两个插槽</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#C792EA;">defalut</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">		//异步组件加载成功时显示</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">SyncVue</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">SyncVue</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">#</span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">	// 异步组件未加载成功时显示</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">skeletonVue</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">skeletonVue</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p><code>&lt;skeletonVue&gt;</code>是<strong>骨架屏</strong></p><p><strong>骨架屏的作用主要是在网络请求较慢时，提供基础占位，当数据加载完成，恢复数据展示。这样给用户一种很自然的过渡，不会造成页面长时间白屏或者闪烁等情况。 常见的骨架屏实现方案有<code>ssr</code>服务端渲染和<code>prerender</code>两种解决方案。</strong></p><p><a href="https://www.cnblogs.com/bbldhf/p/14091594.html" target="_blank" rel="noreferrer">Vue中实现骨架屏的多种方式 - 白不了的黑发 - 博客园 (cnblogs.com)</a></p><h2 id="代码分包" tabindex="-1">代码分包 <a class="header-anchor" href="#代码分包" aria-label="Permalink to &quot;代码分包&quot;">​</a></h2><p><strong>默认情况下，vite会把所有东西放到一个js里面</strong></p><p><strong>而使用异步组件方式，vite会把异步组件单独打包成一个js文件</strong>，只有等用到这个js时才会去做一个加载，大大减少首页白屏时间</p><p>所以可以使用异步组件技术去优化我们的项目</p>`,48),t=[e];function c(r,y,F,D,i,A){return a(),n("div",null,t)}const g=s(p,[["render",c]]);export{d as __pageData,g as default};
